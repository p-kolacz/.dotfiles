#    __    _____
#   |  |  |   __|
#  |  |__|   __|
# |_____|__|
#
# https://godoc.org/github.com/gokcehan/lf

# TODO:
# archivemount imgs rifle back 24bitcolor
# https://github.com/gokcehan/lf/wiki/Tips#new-folder-with-selected-items
# https://github.com/gokcehan/lf/wiki/Tips#select-all-files-or-directories-in-the-current-directory

# ${{
# testvar=testin123
# }}

# cmd ttt $echo $testvar

set ifs "\n"
set previewer preview.sh

# Appearance
set color256
# set dircounts
set info size
set icons
set timefmt ''
set tabstop 4
set sortby name

# Behaviour
set findlen 0
set incsearch true
set scrolloff 3

###########
# Mappings
map a push :mkdir<space>
map i
map id %du -sh $f
map ii $$PAGER $f
map it %df -h --output=avail .
map x !$f
map <c-o> history-back
map <c-n> history-forward

# Rename
map R bulk-rename

# Copy&paste
map d
map dd cut
map DD delete
map y
map yy copy
map yf yank-basename
map yd yank-dirname
map yp yank-path
map Pa link_abs
map Pr link_rel

map . set hidden!
map <enter> shell

# Tools
map ,
map ,b backup
map ,t tar
map ,z zip
map ,e extract
map ,c &meld $fx

# Goto
map g. cd ~/.dotfiles
map gl cd ~/.local
map gc cd ~/Cloud
map gd cd ~/Downloads
map gw cd ~/Work

# Select
map v
map vv :unselect; invert
map vi invert
map ve push :glob-select<space>*.
map vg push :glob-select<space>

# Trash
map tt %trash-put $fx
map tl $trash-list | sort | fzf
map tr $trash-restore 
map te trash-empty

#############
# Commands

cmd open $run.sh

cmd mkdir ${{
    mkdir -p "$@"
    lf -remote "send $id load"$'\n'"send $id select \"$@\""
}}

cmd link_abs %{{
	for file in $(lf -remote 'load'); do
        if [ ! -n "${mode+1}" ]; then
            mode="$file"
            continue
        fi
        files+=("$file")
    done

	[[ ${#files[@]} -lt 1 ]] && echo "No files selected" && exit 1
	ln -s ${files[@]} -t .
}}

cmd link_rel %{{
	for file in $(lf -remote 'load'); do
        if [ ! -n "${mode+1}" ]; then
            mode="$file"
            continue
        fi
        files+=("$file")
    done

	[[ ${#files[@]} -lt 1 ]] && echo "No files selected" && exit 1
	ln -sr ${files[@]} -t .
}}

cmd backup %{{
	zip -r "${f}_$(date +%F_%T).zip" "$(basename "$f")"
}}

cmd extract %{{
	extract -f $(basename "${f%.*}") $f
}}

cmd tar %{{
	tar cvf "$f.tar" "$(basename "$f")"
}}

cmd zip %{{
	zip -r "$f.zip" "$(basename "$f")"
}}

cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd share $curl -F"file=@$fx" https://0x0.st | xclip -selection c

cmd trash-empty ${{
	read -p "Are you sure? " -n 1 -r
	[[ $REPLY =~ ^[Yy]$ ]] && trash-empty
}}

cmd yank-basename ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      xclip -i -selection clipboard
}}

cmd yank-dirname ${{
    dirname -- "$f" | tr -d '\n' | xclip -i -selection clipboard
}}

cmd yank-path ${{
    echo "$fx" | xclip -i -selection clipboard
}}

${{
	dirstory.sh $id push
}}

cmd on-cd %{{
	dirstory.sh $id push
}}

cmd history-back %{{
	res=$(dirstory.sh $id back)
	[[ $? -eq 0 ]] && lf -remote "send $id cd \"$res\"" || echo "$res"
}}

cmd history-forward %{{
	res=$(dirstory.sh $id forward)
	[[ $? -eq 0 ]] && lf -remote "send $id cd \"$res\"" || echo "$res"
}}

# vim: filetype=vim commentstring=#%s
